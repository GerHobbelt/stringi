--- /tmp/stringi-bbbf25bbe6e1aa198389dd08636a3360b5788213/src/icu69/i18n/windtfmt.cpp	2021-05-01 15:37:10.000000000 +1000
+++ i18n/windtfmt.cpp	2021-05-23 17:51:44.358741650 +1000
@@ -94,6 +94,8 @@
     return result;
 }
 
+
+#ifndef U_STRINGI_PATCHES
 // TODO: This is copied in both winnmfmt.cpp and windtfmt.cpp, but really should
 // be factored out into a common helper for both.
 static UErrorCode GetEquivalentWindowsLocaleName(const Locale& locale, UnicodeString** buffer)
@@ -157,13 +159,18 @@
     }
     return status;
 }
+#endif /* U_STRINGI_PATCHES */
+
 
 // TODO: Range-check timeStyle, dateStyle
 Win32DateFormat::Win32DateFormat(DateFormat::EStyle timeStyle, DateFormat::EStyle dateStyle, const Locale &locale, UErrorCode &status)
   : DateFormat(), fDateTimeMsg(NULL), fTimeStyle(timeStyle), fDateStyle(dateStyle), fLocale(locale), fZoneID(), fWindowsLocaleName(nullptr)
 {
     if (U_SUCCESS(status)) {
+        #ifndef U_STRINGI_PATCHES
         GetEquivalentWindowsLocaleName(locale, &fWindowsLocaleName);
+        #endif /* U_STRINGI_PATCHES */
+
         // Note: In the previous code, it would look up the LCID for the locale, and if
         // the locale was not recognized then it would get an LCID of 0, which is a
         // synonym for LOCALE_USER_DEFAULT on Windows.
