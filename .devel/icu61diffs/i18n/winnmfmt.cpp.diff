--- /tmp/stringi-d268f16043fb6de40901e2eab31b39f1ecdcd3f3/src/icu61/i18n/winnmfmt.cpp	2018-04-21 00:45:30.000000000 +1000
+++ /home/gagolews/R/stringi/src/icu61/i18n/winnmfmt.cpp	2018-07-19 17:57:42.491544712 +1000
@@ -139,69 +139,71 @@
     }
 }
 
-// TODO: This is copied in both winnmfmt.cpp and windtfmt.cpp, but really should
-// be factored out into a common helper for both.
-static UErrorCode GetEquivalentWindowsLocaleName(const Locale& locale, UnicodeString** buffer)
-{
-    UErrorCode status = U_ZERO_ERROR;
-    char asciiBCP47Tag[LOCALE_NAME_MAX_LENGTH] = {};
-
-    // Convert from names like "en_CA" and "de_DE@collation=phonebook" to "en-CA" and "de-DE-u-co-phonebk".
-    (void) uloc_toLanguageTag(locale.getName(), asciiBCP47Tag, UPRV_LENGTHOF(asciiBCP47Tag), FALSE, &status);
-
-    if (U_SUCCESS(status))
-    {
-        // Need it to be UTF-16, not 8-bit
-        // TODO: This seems like a good thing for a helper
-        wchar_t bcp47Tag[LOCALE_NAME_MAX_LENGTH] = {};
-        int32_t i;
-        for (i = 0; i < UPRV_LENGTHOF(bcp47Tag); i++)
-        {
-            if (asciiBCP47Tag[i] == '\0')
-            {
-                break;
-            }
-            else
-            {
-                // normally just copy the character
-                bcp47Tag[i] = static_cast<wchar_t>(asciiBCP47Tag[i]);
-            }
-        }
-
-        // Ensure it's null terminated
-        if (i < (UPRV_LENGTHOF(bcp47Tag) - 1))
-        {
-            bcp47Tag[i] = L'\0';
-        }
-        else
-        {
-            // Ran out of room.
-            bcp47Tag[UPRV_LENGTHOF(bcp47Tag) - 1] = L'\0';
-        }
-
-
-        wchar_t windowsLocaleName[LOCALE_NAME_MAX_LENGTH] = {};
 
-        // Note: On Windows versions below 10, there is no support for locale name aliases.
-        // This means that it will fail for locales where ICU has a completely different
-        // name (like ku vs ckb), and it will also not work for alternate sort locale
-        // names like "de-DE-u-co-phonebk".
-
-        // TODO: We could add some sort of exception table for cases like ku vs ckb.
-
-        int length = ResolveLocaleName(bcp47Tag, windowsLocaleName, UPRV_LENGTHOF(windowsLocaleName));
-
-        if (length > 0)
-        {
-            *buffer = new UnicodeString(windowsLocaleName);
-        }
-        else
-        {
-            status = U_UNSUPPORTED_ERROR;
-        }
-    }
-    return status;
-}
+/* stringi 1.1.2 Windows Vista patch ======================================= */
+// // TODO: This is copied in both winnmfmt.cpp and windtfmt.cpp, but really should
+// // be factored out into a common helper for both.
+// static UErrorCode GetEquivalentWindowsLocaleName(const Locale& locale, UnicodeString** buffer)
+// {
+//     UErrorCode status = U_ZERO_ERROR;
+//     char asciiBCP47Tag[LOCALE_NAME_MAX_LENGTH] = {};
+//
+//     // Convert from names like "en_CA" and "de_DE@collation=phonebook" to "en-CA" and "de-DE-u-co-phonebk".
+//     (void) uloc_toLanguageTag(locale.getName(), asciiBCP47Tag, UPRV_LENGTHOF(asciiBCP47Tag), FALSE, &status);
+//
+//     if (U_SUCCESS(status))
+//     {
+//         // Need it to be UTF-16, not 8-bit
+//         // TODO: This seems like a good thing for a helper
+//         wchar_t bcp47Tag[LOCALE_NAME_MAX_LENGTH] = {};
+//         int32_t i;
+//         for (i = 0; i < UPRV_LENGTHOF(bcp47Tag); i++)
+//         {
+//             if (asciiBCP47Tag[i] == '\0')
+//             {
+//                 break;
+//             }
+//             else
+//             {
+//                 // normally just copy the character
+//                 bcp47Tag[i] = static_cast<wchar_t>(asciiBCP47Tag[i]);
+//             }
+//         }
+//
+//         // Ensure it's null terminated
+//         if (i < (UPRV_LENGTHOF(bcp47Tag) - 1))
+//         {
+//             bcp47Tag[i] = L'\0';
+//         }
+//         else
+//         {
+//             // Ran out of room.
+//             bcp47Tag[UPRV_LENGTHOF(bcp47Tag) - 1] = L'\0';
+//         }
+//
+//
+//         wchar_t windowsLocaleName[LOCALE_NAME_MAX_LENGTH] = {};
+//
+//         // Note: On Windows versions below 10, there is no support for locale name aliases.
+//         // This means that it will fail for locales where ICU has a completely different
+//         // name (like ku vs ckb), and it will also not work for alternate sort locale
+//         // names like "de-DE-u-co-phonebk".
+//
+//         // TODO: We could add some sort of exception table for cases like ku vs ckb.
+//
+//         int length = ResolveLocaleName(bcp47Tag, windowsLocaleName, UPRV_LENGTHOF(windowsLocaleName));
+//
+//         if (length > 0)
+//         {
+//             *buffer = new UnicodeString(windowsLocaleName);
+//         }
+//         else
+//         {
+//             status = U_UNSUPPORTED_ERROR;
+//         }
+//     }
+//     return status;
+// }
 
 Win32NumberFormat::Win32NumberFormat(const Locale &locale, UBool currency, UErrorCode &status)
   : NumberFormat(), fCurrency(currency), fFormatInfo(NULL), fFractionDigitsSet(FALSE), fWindowsLocaleName(nullptr)
@@ -209,7 +211,9 @@
     if (!U_FAILURE(status)) {
         fLCID = locale.getLCID();
 
-        GetEquivalentWindowsLocaleName(locale, &fWindowsLocaleName);
+        /* stringi 1.1.2 Windows Vista patch ======================================= */
+//         GetEquivalentWindowsLocaleName(locale, &fWindowsLocaleName);
+
         // Note: In the previous code, it would look up the LCID for the locale, and if
         // the locale was not recognized then it would get an LCID of 0, which is a
         // synonym for LOCALE_USER_DEFAULT on Windows.
