--- /tmp/stringi-d268f16043fb6de40901e2eab31b39f1ecdcd3f3/src/icu61/common/putil.cpp	2018-04-21 00:45:30.000000000 +1000
+++ /home/gagolews/R/stringi/src/icu61/common/putil.cpp	2019-02-15 20:26:07.344449431 +1100
@@ -135,6 +135,12 @@
 #   include <sys/neutrino.h>
 #endif
 
+#ifdef USE_WINDOWS_LOCALE_API
+#include <windows.h>
+#include <winnls.h>
+#endif
+
+
 /*
  * Only include langinfo.h if we have a way to get the codeset. If we later
  * depend on more feature, we can test on U_HAVE_NL_LANGINFO.
@@ -1724,6 +1730,39 @@
 
 #elif U_PLATFORM_USES_ONLY_WIN32_API
 #define POSIX_LOCALE_CAPACITY 64
+    /* ================================================================== */
+    // stringi 1.1.2 patch -- ICU 55.1
+    // icu61/common/putil.cpp: In function 'const char* uprv_getDefaultLocaleID_61()':
+    // icu61/common/putil.cpp:1746:86: error: 'GetUserDefaultLocaleName' was not declared in this scope
+    /* ================================================================== */
+/*
+    UErrorCode status = U_ZERO_ERROR;
+    char *correctedPOSIXLocale = 0;
+
+    if (gCorrectedPOSIXLocale != NULL) {
+        return gCorrectedPOSIXLocale;
+    }
+
+    LCID id = GetThreadLocale();
+    correctedPOSIXLocale = static_cast<char *>(uprv_malloc(POSIX_LOCALE_CAPACITY + 1));
+    if (correctedPOSIXLocale) {
+        int32_t posixLen = uprv_convertToPosix(id, correctedPOSIXLocale, POSIX_LOCALE_CAPACITY, &status);
+        if (U_SUCCESS(status)) {
+            *(correctedPOSIXLocale + posixLen) = 0;
+            gCorrectedPOSIXLocale = correctedPOSIXLocale;
+            ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);
+        } else {
+            uprv_free(correctedPOSIXLocale);
+        }
+    }
+
+    if (gCorrectedPOSIXLocale == NULL) {
+        return "en_US";
+    }
+    return gCorrectedPOSIXLocale;*/
+
+    /* ================================================================== */
+
     UErrorCode status = U_ZERO_ERROR;
     char *correctedPOSIXLocale = 0;
 
@@ -2078,7 +2117,7 @@
         size_t localeCapacity = uprv_min(sizeof(localeBuf), (name-localeName)+1);
         uprv_strncpy(localeBuf, localeName, localeCapacity);
         localeBuf[localeCapacity-1] = 0; /* ensure NULL termination */
-        name = uprv_strncpy(buffer, name+1, buffCapacity);
+        name = uprv_strncpy(buffer, name+1, buffCapacity-1);
         buffer[buffCapacity-1] = 0; /* ensure NULL termination */
         if ((variant = const_cast<char *>(uprv_strchr(name, '@'))) != NULL) {
             *variant = 0;
